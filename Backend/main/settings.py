"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import main.db as db

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(m=x)!m=q*c@g(1b6ft8c2-@p-c_1k%c+f4@4vf%8&6#qzafvl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True 
USE_DOCKER = False

ALLOWED_HOSTS = ['colegio-reich.com', 'api.colegio-reich.com', 'localhost', '13.59.26.2', '0.0.0.0', '127.0.0.1']

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True

# CORS configuration
#CORS_URLS_REGEX = r"^/api/.*$"

CORS_ORIGIN_ALLOW_ALL = True

# CORS_ALLOW_METHODS = ['DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT' ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'coreapi',
    # Apps personalizadas
    'administrador',
    'apoderado',
    'calificacion',
    'clase',
    'contrato',
    'curso',
    'docente',
    'estudiante',
    'fechaAcademica',
    'personas',
    'precios',
    'responsable',
    'usuario',
    # Framework y librerias
    'rest_framework_simplejwt',
    'rest_framework',
    'corsheaders',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Duración del token de acceso
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),  # Duración de la ventana de refresco
    'SLIDING_TOKEN_LIFETIME': timedelta(days=1),  # Duración del token de refresco
    'SLIDING_TOKEN_LIFETIME_GRACE_PERIOD': timedelta(days=0),  # Período de gracia para refrescar el token
    'ALGORITHM': 'HS256',  # Algoritmo de firma
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'main.urls'

import os
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

from dotenv import load_dotenv
import os
try:
    dot_env_loaded = load_dotenv()
except Exception as e:
    print(e)
    print("Error al cargar el archivo .env")

if USE_DOCKER:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"), 
            "HOST": os.getenv("POSTGRES_HOST"),
            "PORT":  "5432"
        }
    }
else:
    DATABASES = db.SQLITE


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Lima'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = "/var/www/html/static/" 

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

# Definicion de los roles
class INTERFACE_ROLES:
    ESTUDIANTE = "Estudiante"
    DOCENTE = "Docente"
    APODERADO = "Apoderado"
    ADMINISTRADOR = "Administrador"

ROLES = (
    (INTERFACE_ROLES.ESTUDIANTE, "Estudiante"),
    (INTERFACE_ROLES.DOCENTE, "Docente"),
    (INTERFACE_ROLES.APODERADO, "Apoderado"),
    (INTERFACE_ROLES.ADMINISTRADOR, "Administrador"),
)

class INTERFACE_METODOS:
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    DELETE = "DELETE"

